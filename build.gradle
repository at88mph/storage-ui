apply plugin: 'war'

repositories {
    jcenter()
    maven {
        url = 'http://www.cadc-ccda.hia-iha.nrc-cnrc.gc.ca/m2repo'
    }
    mavenLocal()

    maven {
        url = 'http://www.cadc-ccda.hia-iha.nrc-cnrc.gc.ca/m2repo'
    }
}

dependencies {
    compile 'log4j:log4j:1.2.+'
    compile 'org.freemarker:freemarker:2.3.25-incubating'
    compile 'com.opencsv:opencsv:3.+'
    compile 'org.restlet.jee:org.restlet:2.3.+'
    compile 'org.restlet.jee:org.restlet.ext.servlet:2.3.+'
    compile 'org.restlet.jee:org.restlet.ext.freemarker:2.3.+'
    compile 'org.restlet.jee:org.restlet.ext.json:2.3.+'

    compile 'org.opencadc:cadc-web-util:1.+'
    compile 'org.opencadc:cadc-util:1.+'
    compile 'org.opencadc:cadc-registry:1.+'
    compile 'org.opencadc:cadc-vosi:1.+'

    compile 'org.opencadc:cadc-download-manager:1.+'
    compile 'org.opencadc:cadc-download-manager-server:1.+'
    compile 'org.opencadc:cadc-upload-manager:1.+'
    compile 'org.opencadc:cadc-vos:1.+'
    compile 'commons-fileupload:commons-fileupload:1.3.+'

    compile 'ca.nrc.cadc:canfar-web:1.+'
    compile 'org.opencadc:cadc-access-control:1.+'

    testCompile 'junit:junit:4.+'
    testCompile 'org.easymock:easymock:3.+'
}

sourceCompatibility = '1.7'
group = 'org.opencadc'
version = '1005'

def docker_image_name = 'opencadc/storage'

war {
    archiveName 'storage##' + project.version + '.war'
}

clean {
    doFirst {
        exec {
            executable 'rm'
            args('-rf', './docker')
        }
    }
}

task initDockerize(type: Copy, dependsOn: build) {
    from 'Dockerfile'
    from 'src/main/resources/LocalAuthority.properties'
    into 'docker/'
}

task copyWAR(type: Copy, dependsOn: war) {
    from 'build/libs/'
    into 'docker/'
    include '*.war'
}

task dockerize(type: Exec, dependsOn: [initDockerize, copyWAR]) {
    commandLine 'docker', 'build', '-t', docker_image_name, '-f', './docker/Dockerfile', './docker/'
}

ext {
    // Change this value to test other locations, such as Production or RC.
    intTest_web_app_url = 'http://localhost:8080/'
}

sourceSets {
    intTest
}

['firefox', 'chrome'].each { driver ->
    task "intTest${driver.capitalize()}"(type: Test) { driverTest ->
        testClassesDir = sourceSets.intTest.output.classesDir
        classpath = sourceSets.intTest.runtimeClasspath
        reports {
            html.destination = reporting.file("$name/html")
        }
        dependencies {
            intTestCompile 'junit:junit:4.+'
            intTestCompile 'ca.nrc.cadc:web-test:1.+'
            intTestCompile 'org.seleniumhq.selenium:selenium-java:2.53.1'
        }

        systemProperty "driver", "${driver}"

        if (project.hasProperty('intTest_selenium_server_url')) {
            systemProperty 'selenium.server.url', project.intTest_selenium_server_url
        }
        else {
            systemProperty 'selenium.server.url', 'http://cadcint2.cadc.dao.nrc.ca:4444'
        }

        if (project.hasProperty('intTest_web_app_url')) {
            systemProperty 'web.app.url', project.intTest_web_app_url
        }

        if (project.hasProperty('intTest_user_name')) {
            systemProperty 'user.name', project.intTest_user_name
        }

        if (project.hasProperty('intTest_user_password')) {
            systemProperty 'user.password', project.intTest_user_password
        }

        maxParallelForks = 3
    }
}
